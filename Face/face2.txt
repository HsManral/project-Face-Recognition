import cv2
import numpy as np
from os import listdir  # For Fetch Data From File
from os.path import isfile, join

data_path = 'E:/face_Recognition/Faces/'

onlyfiles = [f for f in listdir(data_path) if isfile(join(data_path,f))] # join Data With Variable

Training_Data, Labels = [],[]

for i, file in enumerate(onlyfiles): # provides Iterations
	image_path = data_path + onlyfiles[i]
	image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE) # Read GrayscaleImage
	Training_Data.append(np.asarray(image, dtype=np.uint8))
	Labels.append(i)

Labels = np.asarray(Labels, dtype=np.int32)

model = cv2.face.LBPHFaceRecognizer_create() # Local Binary Pattern Histogram Recognise Face is Same or not

model.train(np.asarray(Training_Data), np.asarray(Labels))

print("Model is Trained Successfully")

# Face Pridiction

face_classfier = cv2.CascadeClassifier('E:/face_Recognition/data/haarcascade_frontalface_default.xml')

def face_detector(img, size = 0.5):
	gray =  cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) # Covert to GrayScale "img" is image of Camera
	faces = face_classfier.detectMultiScale(gray,1.3,5)

	if faces is():
		return img,[] # Return Empty Frame

	for(x,y,w,h) in faces:
		cv2.rectangle(img, (x,y), (x+w, y+h), (0,255,0), 2) # Draw Rectange
		roi = img[y:y+h, x:x+w]  # Region of Interest
		roi = cv2.resize(roi,(200,200))

	return img,roi

cap = cv2.VideoCapture(0)

# Start Camera

while True:

	ret, frame = cap.read()

	image, face = face_detector(frame)

	try:
		face = cv2.cvtColor(face,cv2.COLOR_BGR2GRAY) # Convert Image to Grayscale
		result = model.predict(face)

		if result[1] < 500: # 500 is pseudo Value
			confidence = int(100*(1-(result[1])/300)) # 1- due to python Behaviour
			display_string = str(confidence)+'% Confidence it is User'
		cv2.putText(image,display_string,(100,120), cv2.FONT_HERSHEY_COMPLEX,1,(250,120,255),2)

		if confidence > 75:
			cv2.putText(image,"Unlocked",(250,450), cv2.FONT_HERSHEY_COMPLEX,1,(0,255,0),2)
			cv.imshow('face Cropper', image)

		else:
			cv2.putText(image,"Locked",(250,450), cv2.FONT_HERSHEY_COMPLEX,1,(255,0,0),2)
			cv.imshow('face Cropper', image)

	except:
		cv2.putText(image,"Face Not Found",(250,450), cv2.FONT_HERSHEY_COMPLEX,1,(255,0,0),2)
		cv.imshow('face Cropper', image)
		pass

	if cv2.waitKey(1) == 13:
		break


cap.release()
cv2.destroyAllWindow()